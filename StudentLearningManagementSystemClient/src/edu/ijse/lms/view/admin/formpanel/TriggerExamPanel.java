/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.lms.view.admin.formpanel;

import edu.ijse.lms.connector.ServerConnector;
import edu.ijse.lms.controller.TriggerExamController;
import edu.ijse.lms.dto.BatchDTO;
import edu.ijse.lms.dto.ExamAttendanceDTO;
import edu.ijse.lms.dto.ExamDTO;
import edu.ijse.lms.dto.StudentDTO;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import edu.ijse.lms.observer.Subject;
import edu.ijse.lms.observer.TriggerExamObserver;
import edu.ijse.lms.view.admin.AdminHome;

/**
 *
 * @author Pahansith
 */
public class TriggerExamPanel extends javax.swing.JPanel implements TriggerExamObserver {

    private AdminHome home;
    private TriggerExamController triggerExamController;
    private static HashMap<BatchDTO, ArrayList<ExamAttendanceDTO>> attendanceMap = new HashMap<>();
    private ExamDTO examDto;
    private BatchDTO batchDto;
    private long timeFromMiliSeconds;

    public TriggerExamPanel(AdminHome home) {
        try {
            triggerExamController = new TriggerExamController(this);
            UnicastRemoteObject.exportObject(this, 0);
            Subject<TriggerExamObserver> ob = (Subject<TriggerExamObserver>) ServerConnector.getServerConnector().getExamService();
            ob.registerObserver(this);
            initComponents();
            this.home = home;
            setBounds(0, 0, 800, 630);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(TriggerExamPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        connectedStudentTable = new javax.swing.JTable();
        totalStudentCountFiled = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        activatedExamLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(800, 630));
        setLayout(null);

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(220, 500, 120, 40);

        addButton.setText("Start Exam");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        add(addButton);
        addButton.setBounds(50, 500, 150, 40);

        connectedStudentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Name", "NIC", "Connected Time"
            }
        ));
        connectedStudentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectedStudentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(connectedStudentTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 150, 750, 240);

        totalStudentCountFiled.setFont(new java.awt.Font("Open Sans", 1, 12)); // NOI18N
        add(totalStudentCountFiled);
        totalStudentCountFiled.setBounds(160, 420, 180, 30);

        jLabel10.setFont(new java.awt.Font("Open Sans Light", 1, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Total Count");
        add(jLabel10);
        jLabel10.setBounds(30, 420, 83, 30);

        activatedExamLabel.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        activatedExamLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        activatedExamLabel.setText("No Activated Exams");
        add(activatedExamLabel);
        activatedExamLabel.setBounds(210, 60, 150, 30);

        jLabel9.setFont(new java.awt.Font("Open Sans Light", 1, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Connected Students");
        add(jLabel9);
        jLabel9.setBounds(30, 110, 150, 30);

        jLabel11.setFont(new java.awt.Font("Open Sans Light", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Selected Exam");
        add(jLabel11);
        jLabel11.setBounds(30, 60, 150, 30);

        jLabel12.setFont(new java.awt.Font("Open Sans Light", 1, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("TIme Remaining");
        add(jLabel12);
        jLabel12.setBounds(450, 100, 150, 30);

        timerLabel.setFont(new java.awt.Font("Open Sans", 1, 18)); // NOI18N
        timerLabel.setForeground(new java.awt.Color(153, 153, 153));
        timerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerLabel.setText("00:00:00");
        add(timerLabel);
        timerLabel.setBounds(610, 90, 70, 50);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (!attendanceMap.isEmpty()) {
            triggerExamController.triggerExam(examDto, batchDto);
            
            startCountDown(examDto);
        }else{
            JOptionPane.showMessageDialog(this, "No Student Attend yet", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void connectedStudentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectedStudentTableMouseClicked

    }//GEN-LAST:event_connectedStudentTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activatedExamLabel;
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTable connectedStudentTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JTextField totalStudentCountFiled;
    // End of variables declaration//GEN-END:variables

    private void setValuesToMap(StudentDTO student) {
        Date date = new Date();
        SimpleDateFormat format = new SimpleDateFormat("hh:mm:ss");
        String formattedDate = format.format(date);

        ExamAttendanceDTO attendanceDTO = new ExamAttendanceDTO(student.getName(), student.getNic(), formattedDate);
        ArrayList<ExamAttendanceDTO> attendanceList = attendanceMap.get(student.getBatch());
        if (attendanceList == null) {
            attendanceList = new ArrayList<>();
        }
        attendanceList.add(attendanceDTO);
        attendanceMap.put(student.getBatch(), attendanceList);
        setValuesToTable(student.getBatch());
    }

    @Override
    public void update(StudentDTO student) throws RemoteException {
        setValuesToMap(student);

    }

    private void setValuesToTable(BatchDTO batch) {
        ArrayList<ExamAttendanceDTO> list = attendanceMap.get(batch);
        DefaultTableModel model = (DefaultTableModel) connectedStudentTable.getModel();
        if (list != null && this.examDto.getBatch().equals(batch)) {
            model.setRowCount(0);
            for (ExamAttendanceDTO examAttendanceDTO : list) {
                Object[] rowData = {examAttendanceDTO.getStudentName(), examAttendanceDTO.getStudentNic(), examAttendanceDTO.getTime()};
                model.addRow(rowData);
                totalStudentCountFiled.setText(Integer.toString(model.getRowCount()));

            }
        }
    }

    public void setExam(ExamDTO selectedExam) {
        this.examDto = selectedExam;
        activatedExamLabel.setText(examDto.getName());
    }
    
    public void setBatch(BatchDTO selectedBatch){
        this.batchDto = selectedBatch;
    }

    @Override
    public void update(ExamDTO exam) throws RemoteException {
        
        if (this.examDto.getBatch().equals(exam.getBatch())) {
            JOptionPane.showMessageDialog(this, "Exam is Over");
            JPanel loadPanel = home.getLoadPanel();
            loadPanel.removeAll();
            loadPanel.add(new StudentResultsPanel(home));
            loadPanel.repaint();
            loadPanel.revalidate();
        }
    }

    private void startCountDown(ExamDTO exam) {

        if (exam.getDuration().contains("H")) {
            timeFromMiliSeconds = Long.parseLong(exam.getDuration().split("H")[0]) * 60 * 60 * 1000;
        } else if (exam.getDuration().contains("M")) {
            timeFromMiliSeconds = Long.parseLong(exam.getDuration().split("M")[0]) * 60 * 1000;
        }

        Timer t = new Timer();
        t.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (timeFromMiliSeconds == 0) {
                    t.cancel();
                }
                String hms = String.format("%02d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(timeFromMiliSeconds),
                        TimeUnit.MILLISECONDS.toMinutes(timeFromMiliSeconds) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(timeFromMiliSeconds)),
                        TimeUnit.MILLISECONDS.toSeconds(timeFromMiliSeconds) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeFromMiliSeconds)));
                timerLabel.setText(hms);
                timeFromMiliSeconds -= 1000;

            }
        }, 10, 1000);
    }

}
