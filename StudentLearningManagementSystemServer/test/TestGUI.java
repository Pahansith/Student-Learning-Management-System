
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Pahansith
 */
public class TestGUI extends javax.swing.JFrame {

    private void setImage(BufferedImage image) {
        ImagePanel panel = new ImagePanel(image);
        panel.setBackground(Color.red);
        panel.setLayout(null);
        panel.setBounds(0, 0, 300, 300);

        imagePanel.removeAll();
        imagePanel.add(panel);
        imagePanel.repaint();
        imagePanel.revalidate();
    }

    public class ImagePanel extends javax.swing.JPanel {

        private BufferedImage image;

        public ImagePanel(BufferedImage image) {
            this.image = image;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(image, 0, 0, this); // see javadoc for more info on the parameters  
        }

    }

    /**
     * Creates new form TestGUI
     */
    public TestGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        imagePanel.setBackground(new java.awt.Color(153, 255, 255));
        imagePanel.setMinimumSize(new java.awt.Dimension(300, 300));
        imagePanel.setLayout(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        TestGUI test = new TestGUI();
        test.setVisible(true);
        BufferedImage image = test.getImage();
        test.setImage(image);

    }

    public BufferedImage getImage() {
        BufferedImage originalImage = null;
        try {

            byte[] imageInByte;
            originalImage = ImageIO.read(new File(
                    "filedb/image/DSC_0004.jpg"));

            Image scaledImage = originalImage.getScaledInstance(imagePanel.getWidth(),imagePanel.getHeight(),Image.SCALE_FAST);
            
            /*Dimension imageSize = new Dimension(originalImage.getWidth(), originalImage.getHeight());
            Dimension newSize = new Dimension(300, 300);
            
            Dimension scaledDimension = getScaledDimension(imageSize, newSize);
            int type = originalImage.getType();
            
            BufferedImage resizeImage = resizeImage(originalImage, type, (int) scaledDimension.getWidth(), (int) scaledDimension.getHeight());
            BufferedImage cropImage = cropImage(resizeImage, new Rectangle(resizeImage.getWidth(), resizeImage.getWidth()));*/
            /*File file;
            try ( // convert BufferedImage to byte array
            ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            ImageIO.write(cropImage, "jpg", baos);
            baos.flush();
            imageInByte = baos.toByteArray();
            file = new File("filedb/image/Img1.txt");
            FileUtils.writeByteArrayToFile(file, imageInByte);
            }
            // convert byte array back to BufferedImage
            byte[] bytes = IOUtils.toByteArray(new FileInputStream(file));
            InputStream in = new ByteArrayInputStream(bytes);
            BufferedImage bImageFromConvert = ImageIO.read(in);
            //AffineTransform tx = new AffineTransform();
            //tx.setToQuadrantRotation(1, bImageFromConvert.getWidth()/2, bImageFromConvert.getHeight()/2);
            //tx.scale(scalex, scaley);
            //tx.shear(shiftx, shifty);
            //tx.translate(x, y);
            //tx.rotate(1.5708, bImageFromConvert.getWidth() / 2, bImageFromConvert.getHeight() / 2);
            //AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);
            //bImageFromConvert = op.filter(bImageFromConvert, null);
            //BufferedImage transform = transform(bImageFromConvert, 1);
            ImageIO.write(bImageFromConvert, "jpg", new File(
            "filedb/image/Pahansithasd.jpg"));*/

        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
        return originalImage;
    }

    public static Dimension getScaledDimension(Dimension imgSize, Dimension boundary) {

        int original_width = imgSize.width;
        int original_height = imgSize.height;
        int bound_width = boundary.width;
        int bound_height = boundary.height;
        int new_width = original_width;
        int new_height = original_height;

        // first check if we need to scale width
        if (original_width > bound_width) {
            //scale width to fit
            new_width = bound_width;
            //scale height to maintain aspect ratio
            new_height = (new_width * original_height) / original_width;
        }

        // then check if we need to scale even with the new height
        if (new_height > bound_height) {
            //scale height to fit instead
            new_height = bound_height;
            //scale width to maintain aspect ratio
            new_width = (new_height * original_width) / original_height;
        }

        return new Dimension(new_width, new_height);
    }

    private static BufferedImage resizeImage(BufferedImage originalImage, int type,
            Integer img_width, Integer img_height) {
        BufferedImage resizedImage = new BufferedImage(img_width, img_height, type);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, img_width, img_height, null);
        g.dispose();

        return resizedImage;
    }

    private static BufferedImage cropImage(BufferedImage src, Rectangle rect) {
        BufferedImage dest = src.getSubimage(0, 0, rect.width, rect.height);
        return dest;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel imagePanel;
    // End of variables declaration//GEN-END:variables
}
